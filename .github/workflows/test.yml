name: test

on:
  push: {branches: [main]} # pushes to main
  pull_request: {} # all PRs
  schedule: [cron: '0 12 * * 3'] # every Wednesday at noon

jobs:
  pytest:
    strategy:
      matrix:
        python-version: ['3.10']
        java: [21]
        os: ['ubuntu-latest']
        pyserini: ['pyserini', 'pyserini==0.22.0', 'pyserini==0.36.0']
        pyterrier: [
          # 'python-terrier', # TODO: from pypi
          # 'git+https://github.com/terrier-org/pyterrier', # TODO: latest on github
          'git+https://github.com/terrier-org/pyterrier@remove_anserini', # TMP: remove_anserini branch
        ]

    runs-on: ${{ matrix.os }}
    env:
      runtag: ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.pyserini }}-${{ matrix.pyterrier }}
    steps:

     - name: Checkout
       uses: actions/checkout@v4

     - name: Install Python ${{ matrix.python-version }}
       uses: actions/setup-python@v5
       with:
         python-version: ${{ matrix.python-version }}

     - name: Install Java ${{ matrix.java }}
       uses: actions/setup-java@v4
       with:
         java-version: ${{ matrix.java }}
         distribution: 'zulu'

     - name: Cache Dependencies
       uses: actions/cache@v4
       with:
         path: ${{ env.pythonLocation }}
         key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}

     - name: Install Dependencies
       run: |
         pip install --upgrade -r requirements.txt -r requirements-dev.txt faiss-cpu torch
         pip uninstall -y python-terrier pyserini
         pip install --upgrade ${{ matrix.pyterrier }} ${{ matrix.pyserini }} # use the specified pyterrier and pyserini versions
         pip install .

     - name: Unit Test
       run: |
         pytest --durations=20 -p no:faulthandler --json-report --json-report-file ${{ env.runtag }}.results.json --cov pyterrier_anserini --cov-report json:${{ env.runtag }}.coverage.json tests/

     - name: Unit Test Report
       if: always()
       uses: pmeier/pytest-results-action@v0.7.1
       with:
         path: test-results.xml

     - name: Upload Test Results
       if: always()
       uses: actions/upload-artifact@v4
       with:
         name: ${{ env.runtag }}
         path: ${{ env.runtag }}.*.json
         overwrite: true

     - name: Report Test Results
       if: always()
       run: |
         printf "**Test Results**\n\n" >> $GITHUB_STEP_SUMMARY
         jq '.summary' ${{ env.runtag }}.results.json >> $GITHUB_STEP_SUMMARY
         printf "\n\n**Test Coverage**\n\n" >> $GITHUB_STEP_SUMMARY
         jq '.files | to_entries[] | " - `" + .key + "`: **" + .value.summary.percent_covered_display + "%**"' -r ${{ env.runtag }}.coverage.json >> $GITHUB_STEP_SUMMARY
